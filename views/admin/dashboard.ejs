<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <style>
        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }
        
        .is-invalid {
            border-color: #dc3545;
            padding-right: calc(1.5em + 0.75rem);
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
    </style>
</head>
<%- include("../partials/admin/header.ejs") %>
        <section class="content-main">
            <div class="content-header">
                <div class="d-flex justify-content-between">
                    <h2 class="content-title card-title me-5">Sales Report</h2>
                    <div>
                        <a href="/admin/download-sales-report/pdf?filterType=<%= filterInfo.type %>&startDate=<%= filterInfo.startDate %>&endDate=<%= filterInfo.endDate %>" class="btn btn-primary pr-3" target="_blank">
                            <i class="fa fa-file-pdf-o" style="font-size:24px;color:red"></i> Download PDF
                        </a>
                        <a href="/admin/download-sales-report/excel?filterType=<%= filterInfo.type %>&startDate=<%= filterInfo.startDate %>&endDate=<%= filterInfo.endDate %>" class="btn btn-success" target="_blank">
                            <i class="fa fa-file-excel-o"></i> Download Excel
                        </a>
                    </div>
                </div>
            </div>
            <div class="card mb-4">
                <div class="card-body">
                    <form id="filterForm" class="row g-3 align-items-end" method="GET" action="/admin">
                        <div class="col-md-3">
                            <label class="form-label">Filter Type</label>
                            <select class="form-select" id="filterType" name="filterType">
                                <option value="all">All Time</option>
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="monthly">Monthly</option>
                                <option value="yearly">Yearly</option>
                                <option value="custom">Custom Date Range</option>
                            </select>
                        </div>
                        
                        <!-- Custom Date Range Fields (initially hidden) -->
                        <div class="col-md-3 custom-date-inputs" style="display: none;">
                            <label class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="startDate" name="startDate">
                        </div>
                        
                        <div class="col-md-3 custom-date-inputs" style="display: none;">
                            <label class="form-label">End Date</label>
                            <input type="date" class="form-control" id="endDate" name="endDate">
                        </div>
                        
                        <div class="col-md-3">
                            <button type="submit" class="btn btn-warning">Apply Filter</button>
                        </div>
                    </form>
                </div>
            </div>
            
            <div class="mb-3">
                <% if (filterInfo && filterInfo.type !== 'all') { %>
                    <p class="text-dark">
                        Showing results for: 
                        <% if (filterInfo.type === 'custom') { %>
                            <%= new Date(filterInfo.startDate).toLocaleDateString() %> to <%= new Date(filterInfo.endDate).toLocaleDateString() %>
                        <% } else { %>
                            <%= filterInfo.type.charAt(0).toUpperCase() + filterInfo.type.slice(1) %> report
                        <% } %>
                    </p>
                <% } %>
            </div>
            
            <div class="row">
                <% 
                let totalOrders = 0;
                let totalPrice = 0;
                let totalDiscount = 0;
                
                if (orders && orders.length > 0) {
                    totalOrders = orders.length;
                    orders.forEach(order => {
                        order.orderItems.forEach(item => {
                            totalPrice += (item.price * item.quantity);
                        });
                        totalDiscount += (order.discount || 0);
                    });
                }
                
                const netProfit = totalPrice - totalDiscount;

                function formatIndianCurrency(number) {
                    return new Intl.NumberFormat('en-IN', {
                        style: 'currency',
                        currency: 'INR',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }).format(number);
                }
                %>

                <div class="col-lg-4">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-primary-light">
                                <!-- <i class="text-primary material-icons md-shopping_bag"></i> -->
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Top Selling Products</h6>
                                <% topProducts.forEach(([id, product]) => { %>
                                    <div class="mb-1">
                                        <%= product.name %> (<%= product.quantity %> units)
                                    </div>
                                <% }); %>
                            </div>
                        </article>
                    </div>
                </div>
            
                <!-- Top Categories Box -->
                <div class="col-lg-4">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-success-light">
                                <!-- <i class="text-success material-icons md-category"></i> -->
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Top Selling Categories</h6>
                                <% topCategories.forEach(([category, quantity]) => { %>
                                    <div class="mb-1">
                                        <%= category %> (<%= quantity %> units)
                                    </div>
                                <% }); %>
                            </div>
                        </article>
                    </div>
                </div>
            
                <!-- Top Brands Box -->
                <div class="col-lg-4">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-warning-light">
                                <!-- <i class="text-warning material-icons md-stars"></i> -->
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Top Selling Brands</h6>
                                <% topBrands.forEach(([brand, quantity]) => { %>
                                    <div class="mb-1">
                                        <%= brand %> (<%= quantity %> units)
                                    </div>
                                <% }); %>
                            </div>
                        </article>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-primary-light">
                                <i class="text-primary material-icons md-monetization_on mt-2"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Sales</h6>
                                <span><%= totalOrders %> Orders</span>
                            </div>
                        </article>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-success-light">
                                <i class="text-success material-icons md-local_shipping mt-2"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Price</h6>
                                <span><%= formatIndianCurrency(totalPrice) %></span>
                            </div>
                        </article>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-warning-light">
                                <i class="text-warning material-icons md-qr_code mt-2"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Total Discounts</h6>
                                <span><%= formatIndianCurrency(totalDiscount) %></span>
                            </div>
                        </article>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="card card-body mb-4">
                        <article class="icontext">
                            <span class="icon icon-sm rounded-circle bg-info-light">
                                <i class="text-info material-icons md-shopping_basket mt-2"></i>
                            </span>
                            <div class="text">
                                <h6 class="mb-1 card-title">Net Profit</h6>
                                <span><%= formatIndianCurrency(netProfit) %></span>
                            </div>
                        </article>
                    </div>
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Sales Analytics</h5>
                            <canvas id="salesChart" 
                                data-orders='<%- JSON.stringify(orders) %>'
                                data-filter-type='<%= filterInfo.type %>'>
                            </canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card mb-4">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Date</th>
                                    <th>User</th>
                                    <th>Payment Method</th>
                                    <th>Payment Status</th>
                                    <th>Product Name</th>
                                    <th>Quantity</th>
                                    <th>Price</th>
                                    <th>Discount</th>
                                    <th>Final Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% if (orders && orders.length > 0) { %>
                                    <% orders.forEach((order, index) => { %>
                                        <% order.orderItems.forEach(item => { %>
                                            <tr>
                                                <td><%= index + 1 %></td>
                                                <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                                                <td><%= order.userId ? `${order.userId.firstName} ${order.userId.lastName}` : 'N/A' %></td>
                                                <td><%= order.paymentMethod || 'N/A' %></td>
                                                <td>
                                                    <% 
                                                    let displayStatus = order.paymentStatus;
                                                    let badgeClass = 'badge-soft-secondary';
                                                    
                                                    if (order.status === 'Cancelled') {
                                                        if (order.paymentMethod === 'COD') {
                                                            displayStatus = 'Cancelled';
                                                            badgeClass = 'badge-soft-danger';
                                                        } else {
                                                            displayStatus = 'Refunded';
                                                            badgeClass = 'badge-soft-info';
                                                        }
                                                    } else if (order.status === 'Returned' || order.status === 'Return Requested') {
                                                        displayStatus = 'Refunded';
                                                        badgeClass = 'badge-soft-info';
                                                    } else if (order.paymentStatus === 'Paid') {
                                                        badgeClass = 'badge-soft-success';
                                                    } else if (order.paymentStatus === 'Pending') {
                                                        badgeClass = 'badge-soft-warning';
                                                    } else if (order.paymentStatus === 'Failed') {
                                                        badgeClass = 'badge-soft-danger';
                                                    }
                                                    %>
                                                    <span class="badge badge-pill <%= badgeClass %>"><%= displayStatus %></span>
                                                </td>
                                                <td><%= item.product ? item.product.productName : 'N/A' %></td>
                                                <td><%= item.quantity %></td>
                                                <td><%= formatIndianCurrency(item.price * item.quantity) %></td>
                                                <td><%= formatIndianCurrency(order.discount || 0) %></td>
                                                <td><%= formatIndianCurrency((item.price * item.quantity) - (order.discount || 0)) %></td>
                                            </tr>
                                        <% }); %>
                                    <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="10" class="text-center">No orders found</td>
                                    </tr>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </section>
    </main>
    <script src="backend/assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="backend/assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="backend/assets/js/vendors/select2.min.js"></script>
    <script src="backend/assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="backend/assets/js/vendors/jquery.fullscreen.min.js"></script>
    <script src="backend/assets/js/vendors/chart.js"></script>
    <!-- Main Script -->
    <script src="backend/assets/js/main.js" type="text/javascript"></script>
    <script src="backend/assets/js/custom-chart.js" type="text/javascript"></script>
    <script>
        document.getElementById('filterType').addEventListener('change', function() {
            const customDateInputs = document.querySelectorAll('.custom-date-inputs');
            if (this.value === 'custom') {
                customDateInputs.forEach(input => input.style.display = 'block');
            } else {
                customDateInputs.forEach(input => input.style.display = 'none');
            }
        });
        
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const filterType = document.getElementById('filterType').value;
            
            if (filterType === 'custom') {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                // Clear previous error states
                clearErrors();
                
                // Validation
                if (!startDate || !endDate) {
                    if (!startDate) {
                        showError('startDate', 'Start date is required');
                    }
                    if (!endDate) {
                        showError('endDate', 'End date is required');
                    }
                    return;
                }
        
                const startDateTime = new Date(startDate);
                const endDateTime = new Date(endDate);
                const today = new Date();
                today.setHours(23, 59, 59, 999);
        
                // Validate date range
                if (startDateTime > endDateTime) {
                    showError('endDate', 'End date must be after start date');
                    return;
                }
        
                // Validate dates are not in future
                if (startDateTime > today) {
                    showError('startDate', 'Start date cannot be in the future');
                    return;
                }
                if (endDateTime > today) {
                    showError('endDate', 'End date cannot be in the future');
                    return;
                }
        
                // Optional: Validate maximum date range (e.g., 1 year)
                const oneYear = 365 * 24 * 60 * 60 * 1000; // milliseconds in a year
                if (endDateTime - startDateTime > oneYear) {
                    showError('endDate', 'Date range cannot exceed 1 year');
                    return;
                }
        
                // If validation passes, proceed with the filter
                window.location.href = `/admin?filterType=custom&startDate=${startDate}&endDate=${endDate}`;
            } else {
                window.location.href = '/admin?filterType=' + filterType;
            }
        });
        
        // Add these helper functions
        function showError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorDiv = document.getElementById(`${fieldId}Error`) || createErrorDiv(fieldId);
            
            field.classList.add('is-invalid');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }
        
        function createErrorDiv(fieldId) {
            const field = document.getElementById(fieldId);
            const errorDiv = document.createElement('div');
            errorDiv.id = `${fieldId}Error`;
            errorDiv.className = 'invalid-feedback';
            field.parentNode.appendChild(errorDiv);
            return errorDiv;
        }
        
        function clearErrors() {
            const fields = ['startDate', 'endDate'];
            fields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                const errorDiv = document.getElementById(`${fieldId}Error`);
                if (field) {
                    field.classList.remove('is-invalid');
                }
                if (errorDiv) {
                    errorDiv.style.display = 'none';
                }
            });
        }
        
        // Add this to initialize date inputs with max value as today
        document.addEventListener('DOMContentLoaded', function() {
            const today = new Date();
            today.setHours(23, 59, 59, 999);
            const todayStr = today.toISOString().split('T')[0];
            
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            
            startDateInput.max = todayStr;
            endDateInput.max = todayStr;
            
            // Set initial min date for end date
            if (startDateInput.value) {
                endDateInput.min = startDateInput.value;
            }
        });
        
        // Add real-time validation on date changes
        document.getElementById('startDate').addEventListener('change', function() {
            const startDate = this.value;
            const endDateInput = document.getElementById('endDate');
            
            // Update min date for end date input
            if (startDate) {
                endDateInput.min = startDate;
                
                // If end date is before new start date, clear it
                if (endDateInput.value && new Date(endDateInput.value) < new Date(startDate)) {
                    endDateInput.value = '';
                }
            }
            
            if (endDateInput.value) {
                validateDateRange();
            }
        });
        
        document.getElementById('endDate').addEventListener('change', function() {
            const startDate = document.getElementById('startDate');
            if (startDate.value) {
                validateDateRange();
            }
        });
        
        function validateDateRange() {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);
            
            // Set time to end of day for proper comparison
            startDate.setHours(0, 0, 0, 0);
            endDate.setHours(23, 59, 59, 999);
            
            const today = new Date();
            today.setHours(23, 59, 59, 999);
            
            clearErrors();
            
            // Validate start date is not in future
            if (startDate > today) {
                showError('startDate', 'Start date cannot be in the future');
                return false;
            }
            
            // Validate end date is not in future
            if (endDate > today) {
                showError('endDate', 'End date cannot be in the future');
                return false;
            }
            
            // Validate end date is after start date
            if (startDate > endDate) {
                showError('endDate', 'End date must be after start date');
                return false;
            }
            
            // Validate maximum date range (1 year)
            const oneYear = 365 * 24 * 60 * 60 * 1000; // milliseconds in a year
            if (endDate - startDate > oneYear) {
                showError('endDate', 'Date range cannot exceed 1 year');
                return false;
            }
            
            return true;
        }
        
        function processOrderData(orders, filterType) {
            const dataMap = new Map();
            const now = new Date();
            
            // Initialize periods based on filter type
            switch(filterType) {
                case 'daily':
                    // Hourly breakdown for daily view
                    for(let i = 0; i < 24; i++) {
                        const hour = i.toString().padStart(2, '0') + ':00';
                        dataMap.set(hour, { totalSales: 0, orderCount: 0 });
                    }
                    break;
                    
                case 'weekly':
                    // Last 7 days
                    for(let i = 6; i >= 0; i--) {
                        const date = new Date(now);
                        date.setDate(date.getDate() - i);
                        dataMap.set(date.toLocaleDateString(), { totalSales: 0, orderCount: 0 });
                    }
                    break;
                    
                case 'monthly':
                    // Days in current month
                    const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
                    for(let i = 1; i <= daysInMonth; i++) {
                        const date = new Date(now.getFullYear(), now.getMonth(), i);
                        dataMap.set(date.toLocaleDateString(), { totalSales: 0, orderCount: 0 });
                    }
                    break;
                    
                case 'yearly':
                    // All months in current year
                    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                    months.forEach(month => {
                        dataMap.set(month, { totalSales: 0, orderCount: 0 });
                    });
                    break;
                    
                default:
                    // For custom date range or all time, process actual dates
                    orders.forEach(order => {
                        const date = new Date(order.createdOn).toLocaleDateString();
                        if (!dataMap.has(date)) {
                            dataMap.set(date, { totalSales: 0, orderCount: 0 });
                        }
                    });
            }
            
            // Process orders
            orders.forEach(order => {
                let key;
                const orderDate = new Date(order.createdOn);
                const orderTotal = order.orderItems.reduce((sum, item) => 
                    sum + (item.price * item.quantity), 0);
        
                switch(filterType) {
                    case 'daily':
                        key = orderDate.getHours().toString().padStart(2, '0') + ':00';
                        break;
                    case 'yearly':
                        key = orderDate.toLocaleString('default', { month: 'short' });
                        break;
                    default:
                        key = orderDate.toLocaleDateString();
                }
        
                if (dataMap.has(key)) {
                    const existing = dataMap.get(key);
                    existing.totalSales += orderTotal;
                    existing.orderCount += 1;
                }
            });
        
            return {
                labels: Array.from(dataMap.keys()),
                totalSales: Array.from(dataMap.values()).map(v => v.totalSales),
                orderCounts: Array.from(dataMap.values()).map(v => v.orderCount)
            };
        }
        
        function formatIndianCurrency(number) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(number);
        }
        
        function initializeChart(orders, filterType) {
            const ctx = document.getElementById('salesChart').getContext('2d');
            const chartData = processOrderData(orders, filterType);
            
            // Destroy existing chart if it exists
            if (window.salesChart instanceof Chart) {
                window.salesChart.destroy();
            }
        
            window.salesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: chartData.labels,
                    datasets: [
                        {
                            label: 'Total Sales',
                            data: chartData.totalSales,
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Number of Orders',
                            data: chartData.orderCounts,
                            backgroundColor: 'rgba(75, 192, 192, 0.5)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Sales Amount (₹)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return formatIndianCurrency(value);
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Number of Orders'
                            },
                            grid: {
                                drawOnChartArea: false
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.dataset.yAxisID === 'y') {
                                        label += formatIndianCurrency(context.raw);
                                    } else {
                                        label += context.raw;
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // Initialize chart when data is available
        document.addEventListener('DOMContentLoaded', function() {
            const canvas = document.getElementById('salesChart');
            const orders = JSON.parse(canvas.dataset.orders);
            const filterType = canvas.dataset.filterType;
            initializeChart(orders, filterType);
            
            // Update chart when filter changes
            document.getElementById('filterForm').addEventListener('submit', function(e) {
            });
        });
        document.getElementById('filterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const filterType = document.getElementById('filterType').value;
            
            if (filterType === 'custom') {
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                // Clear previous error states
                clearErrors();
                
                // Validation
                if (!startDate || !endDate) {
                    if (!startDate) {
                        showError('startDate', 'Start date is required');
                    }
                    if (!endDate) {
                        showError('endDate', 'End date is required');
                    }
                    return;
                }
        
                const startDateTime = new Date(startDate);
                const endDateTime = new Date(endDate);
                const today = new Date();
                today.setHours(23, 59, 59, 999);
        
                // Validate date range
                if (startDateTime > endDateTime) {
                    showError('endDate', 'End date must be after start date');
                    return;
                }
        
                // Validate dates are not in future
                if (startDateTime > today) {
                    showError('startDate', 'Start date cannot be in the future');
                    return;
                }
                if (endDateTime > today) {
                    showError('endDate', 'End date cannot be in the future');
                    return;
                }
        
                // Optional: Validate maximum date range (e.g., 1 year)
                const oneYear = 365 * 24 * 60 * 60 * 1000; // milliseconds in a year
                if (endDateTime - startDateTime > oneYear) {
                    showError('endDate', 'Date range cannot exceed 1 year');
                    return;
                }
        
                // If validation passes, proceed with the filter
                window.location.href = `/admin?filterType=custom&startDate=${startDate}&endDate=${endDate}`;
            } else {
                window.location.href = '/admin?filterType=' + filterType;
            }
        });
    </script>
</body>

</html>