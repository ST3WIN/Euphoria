<%- include("../../views/partials/user/header.ejs") %>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #111111;
            --secondary-color: #e53637;
            --transition: all 0.3s ease;
        }
        
        body {
            background-color: #f8f9fa;
        }

        .breadcrumb-option {
            background: linear-gradient(to right, #292929, #2a2a2a);
            padding: 40px 0;
            color: white;
            margin-bottom: 30px;
        }

        .breadcrumb__text h4 {
            color: white;
            font-size: 2.5rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .breadcrumb__links a {
            color: var(--secondary-color);
            text-decoration: none;
        }

        .breadcrumb__links span {
            color: #ffffff;
            margin-left: 10px;
        }

        .vertical-tabs {
            border-right: 1px solid #dee2e6;
            height: 100%;
            background: white;
            border-radius: 15px 0 0 15px;
            padding: 20px 0;
        }

        .nav-link {
            border: none;
            padding: 15px 25px;
            color: var(--primary-color);
            transition: var(--transition);
            border-radius: 0;
            display: flex;
            align-items: center;
            gap: 12px;
            margin: 5px 0;
        }

        .nav-link i {
            font-size: 1.2rem;
            width: 24px;
        }

        .nav-link.active {
            background: linear-gradient(to right, #fff5f5, #ffe5e5);
            color: var(--secondary-color);
            border-right: 4px solid var(--secondary-color);
            font-weight: 500;
        }

        .nav-link:hover:not(.active) {
            background-color: #f8f9fa;
            transform: translateX(5px);
        }

        .tab-content {
            background: white;
            border-radius: 0 15px 15px 0;
            padding: 30px;
        }

        .card {
            border: none;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            border-radius: 15px;
            margin-bottom: 25px;
            transition: var(--transition);
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        }

        .card-body {
            padding: 25px;
        }

        .card-title {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 25px;
            font-size: 1.25rem;
        }

        .form-control {
            border: 1.5px solid #e0e0e0;
            padding: 12px 15px;
            border-radius: 10px;
            transition: var(--transition);
        }

        .form-control:focus {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 0.2rem rgba(229, 54, 55, 0.25);
        }

        .form-label {
            font-weight: 500;
            color: #555;
            margin-bottom: 8px;
        }

        .btn {
            padding: 12px 25px;
            border-radius: 10px;
            font-weight: 500;
            transition: var(--transition);
        }

        .btn-primary {
            background: var(--secondary-color);
            border: none;
        }

        .btn-primary:hover {
            background: var(--primary-color);
            transform: translateY(-2px);
        }

        .btn-outline-primary {
            border: 2px solid var(--secondary-color);
            color: var(--secondary-color);
        }

        .btn-outline-primary:hover {
            background: var(--secondary-color);
            color: white;
        }

        .order-card, .address-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.05);
            transition: var(--transition);
        }

        .order-card:hover, .address-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .wallet-card {
            background: linear-gradient(145deg, #ffffff, #f8f9fa);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.05);
        }

        .wallet-card h2 {
            color: var(--primary-color);
            font-size: 2.5rem;
            font-weight: 600;
        }

        .table {
            vertical-align: middle;
        }

        .table thead th {
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
            color: #555;
        }

        .badge {
            padding: 8px 12px;
            border-radius: 20px;
            font-weight: 500;
        }

        .text-success {
            color: #28a745 !important;
        }

        .text-danger {
            color: #dc3545 !important;
        }

        .profile-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 0 30px rgba(0,0,0,0.1);
            overflow: hidden;
            margin-bottom: 40px;
        }
        .nav-link i {
            font-size: 1.2rem;
            width: 24px;
            text-align: center;
            margin-right: 8px;
            transition: var(--transition);
        }
        
        .nav-link.active i {
            color: var(--secondary-color);
        }
        
        .card-title i {
            color: var(--secondary-color);
        }
        
        /* Enhance icon animations */
        .nav-link:hover i {
            transform: scale(1.1);
        }

        /* Add animation for tab transitions */
        .tab-pane {
            animation: fadeIn 0.3s ease-in;
        }
        .info-display {
            padding: 10px 0;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .info-label {
            font-weight: 500;
            color: #666;
            width: 120px;
            min-width: 120px;
        }
        
        .info-value {
            color: #333;
            flex: 1;
        }
        
        .info-display:last-child {
            border-bottom: none;
        }
    
        .editable-email {
            display: flex;
            align-items: center;
            gap: 15px;
        }
    
        .edit-button {
            background: none;
            border: none;
            color: var(--secondary-color);
            cursor: pointer;
            padding: 5px;
            transition: var(--transition);
        }
    
        .edit-button:hover {
            color: var(--primary-color);
            transform: scale(1.1);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>

<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>Profile</h4>
                    <div class="breadcrumb__links">
                        <a href="/">Home</a>
                        <span>Profile</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="container my-5">
    <div class="row">
        <!-- Left Side Tabs -->
        <div class="col-md-3">
            <div class="vertical-tabs">
                <div class="nav flex-column nav-tabs" id="profileTabs" role="tablist">
                    <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#details" type="button">
                        <i class="fas fa-user-circle"></i> User Details
                    </button>
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#address" type="button">
                        <i class="fas fa-map-marker-alt"></i> Address
                    </button>
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#orders" type="button">
                        <i class="fas fa-shopping-bag"></i> Orders
                    </button>
                    <button class="nav-link" data-bs-toggle="tab" data-bs-target="#wallet" type="button">
                        <i class="fas fa-wallet"></i> Wallet
                    </button>
                </div>
            </div>
        </div>

        <!-- Right Side Content -->
        <div class="col-md-9">
            <div class="tab-content" id="profileTabsContent">
                <!-- User Details Tab -->
                <div class="tab-pane fade show active" id="details">
                    <div class="card mb-4">
                        <div class="card-body">
                            <h5 class="card-title mb-4"><i class="fas fa-user-edit me-2"></i>Personal Information</h5>
                            
                            <div class="info-display">
                                <span class="info-label"><i class="fas fa-user me-2"></i>Name</span>
                                <span class="info-value"><%= user.firstName%> <%= user.lastName%></span>
                            </div>
                
                            <div class="info-display">
                                <span class="info-label"><i class="fas fa-envelope me-2"></i>Email</span>
                                <div class="info-value editable-email">
                                    <span><%= user.email%></span>
                                    <a href="/change-email"><button class="edit-button" title="Edit Email">
                                        <i class="fas fa-edit"></i>
                                    </button></a>
                                </div>
                            </div>
                
                            <div class="info-display">
                                <span class="info-label"><i class="fas fa-phone me-2"></i>Phone</span>
                                <span class="info-value"><%= user.phone%></span>
                            </div>
                        </div>
                    </div>
                
                    <!-- Password Change Card remains the same -->
                    <!-- <div class="card">
                        <div class="card-body">
                            <h5 class="card-title mb-4"><i class="fas fa-lock me-2"></i>Change Password</h5>
                            <form>
                                <div class="mb-3">
                                    <label class="form-label">Current Password</label>
                                    <input type="password" class="form-control" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">New Password</label>
                                    <input type="password" class="form-control" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Confirm New Password</label>
                                    <input type="password" class="form-control" required>
                                </div>
                                <button type="submit" class="btn btn-warning">Change Password</button>
                            </form>
                        </div>
                    </div> -->
                </div>

                <!-- Address Tab -->
                <div class="tab-pane fade" id="address">
                    <h5 class="mb-4"><i class="fas fa-home me-2"></i>Your Addresses</h5>
                    <% if (userAddress) { %>
                        <% userAddress.address.forEach((address, index) => { %>
                            <div class="address-card">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h6 class="mb-0"><%= address.addressType %></h6>
                                    <div>
                                        <a href="/editAddress?id=<%= address._id %>"
                                         class="btn btn-sm btn-warning me-2"  data-bs-target="#editAddress<%= index %>">
                                            Edit 
                                            </a>
                                            
                                            <a href="/deleteAddress?id=<%= address._id %>"
                                                class="btn btn-sm btn-danger me-2"  data-bs-target="#editAddress<%= index %>">
                                                   Delete 
                                                   </a>
                                    </div>
                                </div>
                                <p class="mb-1"><strong>Name:</strong> <%= address.name %></p>
                                <p class="mb-1"><%= address.place %></p>
                                <p class="mb-1"><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                                <p class="mb-0"><strong>Phone:</strong> <%= address.phone %> | <strong>Alt Phone:</strong> <%= address.altPhone %></p>
                                
                                <div class="collapse mt-3" id="editAddress<%= index %>">
                                    <form id="editAddressForm<%= index %>" onsubmit="return validateEditAddressForm()">
                                        <input type="hidden" name="addressId" value="<%= address._id %>"> <!-- Hidden field for address ID -->
                                        <div class="mb-3">
                                            <label class="form-label">Address Type*</label>
                                            <input type="text" name="addressType" class="form-control" value="<%= address.addressType %>" required>
                                            <div class="invalid-feedback" id="editAddressTypeError<%= index %>"></div>
                                        </div>
                    
                                        <div class="mb-3">
                                            <label class="form-label">Full Name*</label>
                                            <input type="text" name="name" class="form-control" value="<%= address.name %>" required>
                                            <div class="invalid-feedback" id="editNameError<%= index %>"></div>
                                        </div>
                    
                                        <div class="mb-3">
                                            <label class="form-label">Place/Street Address*</label>
                                            <input type="text" name="place" class="form-control" value="<%= address.place %>" required>
                                            <div class="invalid-feedback" id="editPlaceError<%= index %>"></div>
                                        </div>
                    
                                        <div class="row mb-3">
                                            <div class="col">
                                                <label class="form-label">City*</label>
                                                <input type="text" name="city" class="form-control" value="<%= address.city %>" required>
                                                <div class="invalid-feedback" id="editCityError<%= index %>"></div>
                                            </div>
                                            <div class="col">
                                                <label class="form-label">State*</label>
                                                <input type="text" name="state" class="form-control" value="<%= address.state %>" required>
                                                <div class="invalid-feedback" id="editStateError<%= index %>"></div>
                                            </div>
                                        </div>
                    
                                        <div class="mb-3">
                                            <label class="form-label">PIN Code*</label>
                                            <input type="text" name="pincode" class="form-control" value="<%= address.pincode %>" maxlength="6" required>
                                            <div class="invalid-feedback" id="editPincodeError<%= index %>"></div>
                                        </div>
                    
                                        <div class="mb-3">
                                            <label class="form-label">Phone Number*</label>
                                            <input type="tel" name="phone" class="form-control" value="<%= address.phone %>" maxlength="10" required>
                                            <div class="invalid-feedback" id="editPhoneError<%= index %>"></div>
                                        </div>
                    
                                        <div class="mb-3">
                                            <label class="form-label">Alternative Phone Number*</label>
                                            <input type="tel" name="altPhone" class="form-control" value="<%= address.altPhone %>" maxlength="10" required>
                                            <div class="invalid-feedback" id="editAltPhoneError<%= index %>"></div>
                                        </div>
                    
                                        <button type="submit" class="btn btn-primary">Save Changes</button>
                                        <button type="button" class="btn btn-outline-secondary" data-bs-toggle="collapse" data-bs-target="#editAddress<%= index %>">
                                            Cancel
                                        </button>
                                    </form>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>No addresses found.
                        </div>
                    <% } %>
                    
                    <!-- Add New Address -->
                    <button class="btn btn-outline-primary mt-3" data-bs-toggle="collapse" data-bs-target="#addNewAddress">
                        Add New Address
                    </button>
                    <div class="collapse mt-3" id="addNewAddress">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title mb-3">New Address</h6>
                                <form  id="addressForm" onsubmit="return validateAddressForm()">
                                    <div class="mb-3">
                                        <label class="form-label">Address Type* (e.g., Home, Office, etc.)</label>
                                        <input type="text" name="addressType" class="form-control" required>
                                        <div class="invalid-feedback" id="addressTypeError"></div>
                                    </div>
                    
                                    <div class="mb-3">
                                        <label class="form-label">Full Name*</label>
                                        <input type="text" name="name" class="form-control" required>
                                        <div class="invalid-feedback" id="nameError"></div>
                                    </div>
                    
                                    <div class="mb-3">
                                        <label class="form-label">Place/Street Address*</label>
                                        <input type="text" name="place" class="form-control" required>
                                        <div class="invalid-feedback" id="placeError"></div>
                                    </div>
                    
                                    <div class="row mb-3">
                                        <div class="col">
                                            <label class="form-label">City*</label>
                                            <input type="text" name="city" class="form-control" required>
                                            <div class="invalid-feedback" id="cityError"></div>
                                        </div>
                                        <div class="col">
                                            <label class="form-label">State*</label>
                                            <input type="text" name="state" class="form-control" required>
                                            <div class="invalid-feedback" id="stateError"></div>
                                        </div>
                                    </div>
                    
                                    <div class="mb-3">
                                        <label class="form-label">PIN Code*</label>
                                        <input type="text" name="pincode" class="form-control" maxlength="6" required>
                                        <div class="invalid-feedback" id="pincodeError"></div>
                                    </div>
                    
                                    <div class="mb-3">
                                        <label class="form-label">Phone Number*</label>
                                        <input type="tel" name="phone" class="form-control" maxlength="10" required>
                                        <div class="invalid-feedback" id="phoneError"></div>
                                    </div>
                    
                                    <div class="mb-3">
                                        <label class="form-label">Alternative Phone Number*</label>
                                        <input type="tel" name="altPhone" class="form-control" maxlength="10" required>
                                        <div class="invalid-feedback" id="altPhoneError"></div>
                                    </div>
                    
                                    <button type="submit" class="btn btn-primary">Add Address</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Orders Tab -->
                <div class="tab-pane fade" id="orders">
                    <h5 class="mb-4"><i class="fas fa-box me-2"></i>Your Orders</h5>
                    <div id="ordersList">
                        <% if (orders && orders.length > 0) { %>
                            <% orders.forEach(order => { %>
                                <div class="order-card mb-4">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <div>
                                            <h6 class="mb-1">Order #<%= order.orderId %></h6>
                                            <small class="text-muted">Placed on <%= new Date(order.createdOn).toLocaleDateString() %></small>
                                        </div>
                                        <div>
                                            <span class="badge <%= getStatusBadgeClass(order.status) %>"><%= order.status %></span>
                                        </div>
                                    </div>
                                    <div class="order-items mb-3">
                                        <% order.orderItems.forEach(item => { %>
                                            <div class="d-flex align-items-center mb-2">
                                                <img src="/uploads/re-image/<%= item.product.productImage[0] %>" 
                                                     alt="<%= item.product.productName %>" 
                                                     class="me-3" style="width: 60px; height: 60px; object-fit: cover;">
                                                <div>
                                                    <h6 class="mb-0"><%= item.product.productName %></h6>
                                                    <small class="text-muted">
                                                        Qty: <%= item.quantity %> × ₹<%= item.price.toLocaleString('en-IN') %>
                                                    </small>
                                                </div>
                                            </div>
                                        <% }) %>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>Total: ₹<%= order.finalAmount.toLocaleString('en-IN') %></strong>
                                        </div>
                                        <div>
                                            <% if (order.status === 'Pending' || order.status === 'Processing' || order.status === 'Shipped') { %>
                                                <form action="/orders/cancel/<%= order._id %>" method="POST" 
                                                      onsubmit="return confirmCancel(event)">
                                                    <button type="submit" class="btn btn-danger btn-sm">
                                                        Cancel Order
                                                    </button>
                                                </form>
                                            <% } else if (order.status === 'Delivered') { %>
                                                <form action="/orders/return/<%= order._id %>" method="POST" 
                                                      onsubmit="return confirmReturn(event)">
                                                    <button type="submit" class="btn btn-warning btn-sm">
                                                        Return Order
                                                    </button>
                                                </form>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        <% } else { %>
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>No orders found.
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- Wallet Tab -->
                <div class="tab-pane fade" id="wallet">
                    <div class="row">
                        <div class="col-md-4 mb-4">
                            <div class="wallet-card p-4">
                                <h5 class="mb-3"><i class="fas fa-wallet me-2"></i>Wallet Balance</h5>
                                <h3 class="mb-0">₹<%= user.wallet || 0 %></h3>
                            </div>
                        </div>
                        <div class="col-md-8 mb-4">
                            <div class="wallet-card p-4">
                                <h5 class="mb-3"><i class="fas fa-plus-circle me-2"></i>Add Money</h5>
                                <form id="addMoneyForm" onsubmit="return handleAddMoney(event)">
                                    <div class="mb-3">
                                        <label for="amount" class="form-label">Enter Amount (₹)</label>
                                        <input  class="form-control" id="amount" name="amount" min="1" required>
                                    </div>
                                    <button type="submit" class="btn btn-primary">Add Money</button>
                                </form>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="wallet-card p-4">
                                <h5 class="mb-3"><i class="fas fa-history me-2"></i>Transaction History</h5>
                                <% if (walletTransactions && walletTransactions.length > 0) { %>
                                    <div class="table-responsive">
                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>Date</th>
                                                    <th>Description</th>
                                                    <th>Amount</th>
                                                    <th>Type</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <% walletTransactions.forEach(transaction => { %>
                                                    <tr>
                                                        <td><%= new Date(transaction.timestamp).toLocaleDateString() %></td>
                                                        <td><%= transaction.description %></td>
                                                        <td class="<%= (transaction.type === 'credit' || transaction.type === 'refunded') ? 'text-success' : 'text-danger' %>">
                                                            <%= (transaction.type === 'credit' || transaction.type === 'refunded') ? '+' : '-' %>₹<%= transaction.amount.toLocaleString() %>
                                                        </td>
                                                        <td><%= transaction.type %></td>
                                                    </tr>
                                                <% }) %>
                                            </tbody>
                                        </table>
                                    </div>
                                <% } else { %>
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle me-2"></i>No transactions found.
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function confirmCancel(event) {
        event.preventDefault();
        const form = event.target;
        
        Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                form.submit();
            }
        });
        
        return false;
    }

    function validateEditAddressForm() {
        let isValid = true;
        const form = document.getElementById('addressForm');
        
        // Reset previous error states
        const errorElements = form.getElementsByClassName('invalid-feedback');
        const inputs = form.getElementsByTagName('input');
        
        for(let element of errorElements) {
            element.style.display = 'none';
        }
        for(let input of inputs) {
            input.classList.remove('is-invalid');
        }
    
        // Address Type Validation
        const addressType = form.addressType.value.trim();
        if (!addressType) {
            document.getElementById('addressTypeError').textContent = 'Address type is required';
            document.getElementById('addressTypeError').style.display = 'block';
            form.addressType.classList.add('is-invalid');
            isValid = false;
        }
    
        // Name Validation
        const name = form.name.value.trim();
        if (!name) {
            document.getElementById('nameError').textContent = 'Name is required';
            document.getElementById('nameError').style.display = 'block';
            form.name.classList.add('is-invalid');
            isValid = false;
        }
    
        // Place Validation
        const place = form.place.value.trim();
        if (!place) {
            document.getElementById('placeError').textContent = 'Place is required';
            document.getElementById('placeError').style.display = 'block';
            form.place.classList.add('is-invalid');
            isValid = false;
        }
    
        // City Validation
        const city = form.city.value.trim();
        if (!city) {
            document.getElementById('cityError').textContent = 'City is required';
            document.getElementById('cityError').style.display = 'block';
            form.city.classList.add('is-invalid');
            isValid = false;
        }
    
        // State Validation
        const state = form.state.value.trim();
        if (!state) {
            document.getElementById('stateError').textContent = 'State is required';
            document.getElementById('stateError').style.display = 'block';
            form.state.classList.add('is-invalid');
            isValid = false;
        }
    
        // Pincode Validation
        const pincode = form.pincode.value.trim();
        if (!pincode) {
            document.getElementById('pincodeError').textContent = 'PIN code is required';
            document.getElementById('pincodeError').style.display = 'block';
            form.pincode.classList.add('is-invalid');
            isValid = false;
        } else if (!/^\d{6}$/.test(pincode)) {
            document.getElementById('pincodeError').textContent = 'PIN code must be exactly 6 digits';
            document.getElementById('pincodeError').style.display = 'block';
            form.pincode.classList.add('is-invalid');
            isValid = false;
        }
    
        // Phone Validation
        const phone = form.phone.value.trim();
        if (!phone) {
            document.getElementById('phoneError').textContent = 'Phone number is required';
            document.getElementById('phoneError').style.display = 'block';
            form.phone.classList.add('is-invalid');
            isValid = false;
        } else if (!/^\d{10}$/.test(phone)) {
            document.getElementById('phoneError').textContent = 'Phone number must be exactly 10 digits';
            document.getElementById('phoneError').style.display = 'block';
            form.phone.classList.add('is-invalid');
            isValid = false;
        }
    
        // Alternative Phone Validation
        const altPhone = form.altPhone.value.trim();
        if (!altPhone) {
            document.getElementById('altPhoneError').textContent = 'Alternative phone number is required';
            document.getElementById('altPhoneError').style.display = 'block';
            form.altPhone.classList.add('is-invalid');
            isValid = false;
        } else if (!/^\d{10}$/.test(altPhone)) {
            document.getElementById('altPhoneError').textContent = 'Alternative phone number must be exactly 10 digits';
            document.getElementById('altPhoneError').style.display = 'block';
            form.altPhone.classList.add('is-invalid');
            isValid = false;
        } else if (altPhone === phone) {
            document.getElementById('altPhoneError').textContent = 'Alternative phone number must be different from primary phone';
            document.getElementById('altPhoneError').style.display = 'block';
            form.altPhone.classList.add('is-invalid');
            isValid = false;
        }
    
        if (isValid) {
            // Prevent default form submission
            event.preventDefault();
            
            // Collect form data
            const formData = new FormData(form);
            const data = {};
            formData.forEach((value, key) => data[key] = value);
    
            // Send AJAX request
            fetch('/editAddress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonColor: '#e53637'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/userProfile';
                        }
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message,
                        icon: 'error',
                        confirmButtonColor: '#e53637'
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    title: 'Error!',
                    text: 'Something went wrong. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#e53637'
                });
            });
        }
        return false;
    }
    function showLoading() {
        Swal.fire({
            title: 'Adding Address...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });
    }
</script>
<script>
    function validateAddressForm() {
        let isValid = true;
        const form = document.getElementById('addressForm');
        
        // Reset previous error states
        const errorElements = form.getElementsByClassName('invalid-feedback');
        const inputs = form.getElementsByTagName('input');
        
        for(let element of errorElements) {
            element.style.display = 'none';
        }
        for(let input of inputs) {
            input.classList.remove('is-invalid');
        }
    
        // Address Type Validation
        const addressType = form.addressType.value.trim();
        if (!addressType) {
            document.getElementById('addressTypeError').textContent = 'Address type is required';
            document.getElementById('addressTypeError').style.display = 'block';
            form.addressType.classList.add('is-invalid');
            isValid = false;
        }
    
        // Name Validation
        const name = form.name.value.trim();
        if (!name) {
            document.getElementById('nameError').textContent = 'Name is required';
            document.getElementById('nameError').style.display = 'block';
            form.name.classList.add('is-invalid');
            isValid = false;
        }
    
        // Place Validation
        const place = form.place.value.trim();
        if (!place) {
            document.getElementById('placeError').textContent = 'Place is required';
            document.getElementById('placeError').style.display = 'block';
            form.place.classList.add('is-invalid');
            isValid = false;
        }
    
        // City Validation
        const city = form.city.value.trim();
        if (!city) {
            document.getElementById('cityError').textContent = 'City is required';
            document.getElementById('cityError').style.display = 'block';
            form.city.classList.add('is-invalid');
            isValid = false;
        }
    
        // State Validation
        const state = form.state.value.trim();
        if (!state) {
            document.getElementById('stateError').textContent = 'State is required';
            document.getElementById('stateError').style.display = 'block';
            form.state.classList.add('is-invalid');
            isValid = false;
        }
    
        // Pincode Validation
        const pincode = form.pincode.value.trim();
        if (!pincode) {
            document.getElementById('pincodeError').textContent = 'PIN code is required';
            document.getElementById('pincodeError').style.display = 'block';
            form.pincode.classList.add('is-invalid');
            isValid = false;
        } else if (!/^\d{6}$/.test(pincode)) {
            document.getElementById('pincodeError').textContent = 'PIN code must be exactly 6 digits';
            document.getElementById('pincodeError').style.display = 'block';
            form.pincode.classList.add('is-invalid');
            isValid = false;
        }
    
        // Phone Validation
        const phone = form.phone.value.trim();
        if (!phone) {
            document.getElementById('phoneError').textContent = 'Phone number is required';
            document.getElementById('phoneError').style.display = 'block';
            form.phone.classList.add('is-invalid');
            isValid = false;
        } else if (!/^\d{10}$/.test(phone)) {
            document.getElementById('phoneError').textContent = 'Phone number must be exactly 10 digits';
            document.getElementById('phoneError').style.display = 'block';
            form.phone.classList.add('is-invalid');
            isValid = false;
        }
    
        // Alternative Phone Validation
        const altPhone = form.altPhone.value.trim();
        if (!altPhone) {
            document.getElementById('altPhoneError').textContent = 'Alternative phone number is required';
            document.getElementById('altPhoneError').style.display = 'block';
            form.altPhone.classList.add('is-invalid');
            isValid = false;
        } else if (!/^\d{10}$/.test(altPhone)) {
            document.getElementById('altPhoneError').textContent = 'Alternative phone number must be exactly 10 digits';
            document.getElementById('altPhoneError').style.display = 'block';
            form.altPhone.classList.add('is-invalid');
            isValid = false;
        } else if (altPhone === phone) {
            document.getElementById('altPhoneError').textContent = 'Alternative phone number must be different from primary phone';
            document.getElementById('altPhoneError').style.display = 'block';
            form.altPhone.classList.add('is-invalid');
            isValid = false;
        }
    
        if (isValid) {
            // Prevent default form submission
            event.preventDefault();
            
            // Collect form data
            const formData = new FormData(form);
            const data = {};
            formData.forEach((value, key) => data[key] = value);
    
            // Send AJAX request
            fetch('/addAddress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success',
                        confirmButtonColor: '#e53637'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '/userProfile';
                        }
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message,
                        icon: 'error',
                        confirmButtonColor: '#e53637'
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    title: 'Error!',
                    text: 'Something went wrong. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#e53637'
                });
            });
        }
        return false;
    }
    function showLoading() {
        Swal.fire({
            title: 'Adding Address...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });
    }
    </script>

<script>
    <% if (orderMessage) { %>
        Swal.fire({
            icon: '<%= orderMessage.type %>',
            title: '<%= orderMessage.type === "success" ? "Success!" : "Oops..." %>',
            text: '<%= orderMessage.message %>',
            showConfirmButton: <%= orderMessage.type === "error" %>,
            timer: <%= orderMessage.type === "success" ? 2000 : null %>
        });
    <% } %>

    function confirmCancel(event) {
        event.preventDefault();
        const form = event.target;
        
        Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                form.submit();
            }
        });
        
        return false;
    }
</script>
<script>
    function loadOrders() {
        fetch('/orders/list')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const ordersHtml = data.orders.map(order => `
                        <div class="order-card mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <div>
                                    <h6 class="mb-1">Order #${order.orderId}</h6>
                                    <small class="text-muted">Placed on ${new Date(order.createdOn).toLocaleDateString()}</small>
                                </div>
                                <div>
                                    <span class="badge ${getStatusBadgeClass(order.status)}">${order.status}</span>
                                </div>
                            </div>
                            <div class="order-items mb-3">
                                ${order.orderItems.map(item => `
                                    <div class="d-flex align-items-center mb-2">
                                        <img src="/uploads/re-image/${item.product.productImage[0]}" 
                                             alt="${item.product.productName}" 
                                             class="me-3" style="width: 60px; height: 60px; object-fit: cover;">
                                        <div>
                                            <h6 class="mb-0">${item.product.productName}</h6>
                                            <small class="text-muted">
                                                Qty: ${item.quantity} × ₹${item.price.toLocaleString('en-IN')}
                                            </small>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>Total: ₹${order.finalAmount.toLocaleString('en-IN')}</strong>
                                </div>
                                <div>
                                    ${order.status === 'Pending' || order.status === 'Processing' || order.status === 'Shipped' ? `
                                        <button class="btn btn-danger btn-sm" onclick="cancelOrder('${order.orderId}')">
                                            Cancel Order
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                    `).join('');
                    
                    document.getElementById('ordersList').innerHTML = ordersHtml || `
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>No orders found.
                        </div>
                    `;
                } else {
                    throw new Error(data.message || 'Failed to load orders');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('ordersList').innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle me-2"></i>Failed to load orders. Please try again.
                    </div>
                `;
            });
    }

    function cancelOrder(orderId) {
        Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/orders/${orderId}/cancel`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire(
                            'Cancelled!',
                            'Your order has been cancelled.',
                            'success'
                        );
                        loadOrders(); // Reload orders list
                    } else {
                        throw new Error(data.message || 'Failed to cancel order');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire(
                        'Error!',
                        error.message || 'Failed to cancel order',
                        'error'
                    );
                });
            }
        });
    }

    // Load orders when the orders tab is shown
    document.querySelector('a[data-bs-target="#orders"]').addEventListener('click', loadOrders);
</script>
<script>
    async function handleAddMoney(event) {
        event.preventDefault();
        const amount = parseFloat(document.getElementById('amount').value);
        
        if (isNaN(amount) || amount <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Amount',
                text: 'Please enter a valid amount'
            });
            return false;
        }
        
        try {
            const response = await fetch('/addMoneyToWallet', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ amount: amount })
            });
            
            const data = await response.json();
            
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Money added to wallet successfully!',
                    showConfirmButton: true
                }).then(() => {
                    window.location.reload();
                });
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: error.message || 'Something went wrong!'
            });
        }
        
        return false;
    }
</script>
<script>
    function confirmReturn(event) {
        event.preventDefault();
        const form = event.target;
        
        Swal.fire({
            title: 'Return Order',
            text: 'Are you sure you want to return this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, return it!'
        }).then((result) => {
            if (result.isConfirmed) {
                form.submit();
            }
        });
        return false;
    }
</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<%- include("../../views/partials/user/footer.ejs") %>