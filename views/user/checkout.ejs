<head>
    <style>
        .coupon-card {
            background-color: #f8f9fa;
            transition: all 0.3s ease;
        }
        
        .coupon-card:hover {
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        .coupon-list {
            max-height: 300px;
            overflow-y: auto;
        }
    </style>
</head>
<%- include("../../views/partials/user/header.ejs") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- <script src="https://checkout.razorpay.com/v1/checkout.js"></script> -->

<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>Checkout</h4>
                    <div class="breadcrumb__links">
                        <a href="/">Home</a>
                        <a href="/cart">Shopping Cart</a>
                        <span>Checkout</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="checkout spad">
    <div class="container">
        <div class="row">
            <div class="col-lg-8">
                <h5 class="mb-4">Delivery Address</h5>
                
                <!-- Address Selection -->
                <div class="address-selection mb-4">
                    <% if (addresses && addresses.length > 0) { %>
                        <% addresses.forEach((address, index) => { %>
                            <div class="address-card mb-3 p-3 border rounded">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="selectedAddress" 
                                           value="<%= index %>" id="address<%= index %>">
                                    <label class="form-check-label" for="address<%= index %>">
                                        <strong><%= address.name %></strong><br>
                                        <%= address.place %>, <%= address.city %><br>
                                        <%= address.state %> - <%= address.pincode %><br>
                                        Phone: <%= address.phone %><br>
                                        Alt Phone: <%= address.altPhone %><br>
                                        <div class="mt-2">
                                            <a href="/editAddress?id=<%= address._id %>&return=checkout" class="btn btn-sm btn-primary">Edit</a>
                                        </div>
                                    </label>
                                </div>
                                <div class="mt-2">
                                    <!-- <button class="btn btn-sm btn-outline-secondary" 
                                            onclick="editAddress('<%= index %>')">Edit</button> -->
                                </div>
                            </div>
                        <% }); %>
                    <% } %>
                    <button class="btn btn-outline-primary" onclick="showAddAddressForm()">
                        <i class="fa fa-plus"></i> Add New Address
                    </button>
                </div>

                <!-- Add/Edit Address Form (Initially Hidden) -->
                <div id="addressForm" class="mb-4" style="display: none;">
                    <form id="shippingAddressForm">
                        <input type="hidden" id="addressIndex">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <input type="text" class="form-control" id="name" placeholder="Full Name" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <input type="tel" class="form-control" id="phone" placeholder="Phone Number" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <input type="tel" class="form-control" id="altPhone" placeholder="Alternative Phone Number" required>
                        </div>
                        <div class="mb-3">
                            <input type="text" class="form-control" id="place" placeholder="Address (House No, Street, Area)" required>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <input type="text" class="form-control" id="city" placeholder="City" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <input type="text" class="form-control" id="state" placeholder="State" required>
                            </div>
                            <div class="col-md-4 mb-3">
                                <input type="number" class="form-control" id="pincode" placeholder="PIN Code" required>
                            </div>
                        </div>
                        <div class="mb-3">
                            <select class="form-control" id="addressType" required>
                                <option value="">Select Address Type</option>
                                <option value="home">Home</option>
                                <option value="work">Work</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Save Address</button>
                        <button type="button" class="btn btn-secondary" onclick="hideAddressForm()">Cancel</button>
                    </form>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="col-lg-4">
                <div class="checkout__order">
                    <h5>Your Order</h5>
                    <div class="checkout__order__product">
                        <ul>
                            <% let subtotal = 0; %>
                            <% cartItems.forEach(item => { %>
                                <li><%= item.productId.productName %> × <%= item.quantity %> 
                                    <span>₹<%= item.totalPrice.toLocaleString('en-IN') %></span></li>
                                <% subtotal += item.totalPrice; %>
                            <% }); %>
                        </ul>
                    </div>
                    <div class="checkout__order__total">
                        <ul>
                            <li>Subtotal <span>₹<%= subtotal.toLocaleString('en-IN') %></span></li>
                            <li id="discountRow" style="display: none;">Discount <span id="discountAmount">₹0</span></li>
                            <li>Total <span id="finalTotal">₹<%= subtotal.toLocaleString('en-IN') %></span></li>
                        </ul>
                    </div>

                    <!-- Payment Options -->
                    <div class="payment-options mb-4">
                        <h6>Payment Method</h6>
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="cod" value="cod" checked>
                            <label class="form-check-label" for="cod">
                                Cash on Delivery
                            </label>
                        </div>
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="online" value="razorpay">
                            <label class="form-check-label" for="online">
                                Online Payment(UPI,Cards,Net Banking)
                            </label>
                        </div>
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="wallet">
                            <label class="form-check-label" for="wallet">
                                Wallet
                            </label>
                        </div>
                    </div>

                    <div class="available-coupons mb-4">
                        <h6>Available Coupons</h6>
                        <div class="coupon-list">
                            <% if (availableCoupons && availableCoupons.length > 0) { %>
                                <% availableCoupons.forEach(coupon => { %>
                                    <div class="coupon-card p-3 mb-2 border rounded">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h6 class="mb-1"><%= coupon.name %></h6>
                                                <p class="mb-1 small">Save ₹<%= coupon.offerPrice %></p>
                                                <p class="mb-1 small text-muted">Min. Order: ₹<%= coupon.minimumPrice %></p>
                                                <p class="mb-0 small text-muted">Expires: <%= new Date(coupon.expireOn).toLocaleDateString() %></p>
                                            </div>
                                            <button 
                                                class="btn btn-sm btn-outline-primary" 
                                                onclick="applyCouponCode('<%= coupon.name %>')"
                                            >
                                                Apply
                                            </button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p class="text-muted">No coupons available</p>
                            <% } %>
                        </div>
                    </div>
                    <!-- Coupon Section (Moved here) -->
                    <div class="coupon-section mb-4">
                        <h6>Have a Coupon?</h6>
                        <div class="input-group">
                            <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code">
                            <button class="btn btn-outline-secondary" id="couponButton" type="button" onclick="applyCoupon()">Apply</button>
                        </div>
                        <div id="couponMessage" class="mt-2"></div>
                    </div>

                    <button type="button" class="site-btn" onclick="placeOrder()">PLACE ORDER</button>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
function applyCouponCode(couponCode) {
        document.getElementById('couponCode').value = couponCode;
        applyCoupon();
    }
function showAddAddressForm() {
    document.getElementById('addressForm').style.display = 'block';
    // Clear form fields
    document.getElementById('addressIndex').value = '';
    document.getElementById('shippingAddressForm').reset();
}

function hideAddressForm() {
    document.getElementById('addressForm').style.display = 'none';
}

document.getElementById('shippingAddressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const addressData = {
        name: document.getElementById('name').value,
        phone: document.getElementById('phone').value,
        altPhone: document.getElementById('altPhone').value,
        place: document.getElementById('place').value,
        city: document.getElementById('city').value,
        state: document.getElementById('state').value,
        pincode: document.getElementById('pincode').value,
        addressType: document.getElementById('addressType').value
    };

    const addressIndex = document.getElementById('addressIndex').value;
    const url = addressIndex === '' ? '/checkout/add-address' : `/checkout/update-address/${addressIndex}`;
    const method = addressIndex === '' ? 'POST' : 'PUT';

    try {
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(addressData)
        });

        const result = await response.json();
        
        if (result.success) {
            Swal.fire({
                title: 'Success!',
                text: 'Address saved successfully',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then(() => {
                location.reload();
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: result.message || 'Failed to save address',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
});

async function editAddress(index) {
    try {
        const response = await fetch(`/checkout/get-address/${index}`);
        const address = await response.json();
        
        if (response.ok) {
            document.getElementById('addressIndex').value = index;
            document.getElementById('name').value = address.name;
            document.getElementById('phone').value = address.phone;
            document.getElementById('altPhone').value = address.altPhone;
            document.getElementById('place').value = address.place;
            document.getElementById('city').value = address.city;
            document.getElementById('state').value = address.state;
            document.getElementById('pincode').value = address.pincode;
            document.getElementById('addressType').value = address.addressType;
            
            document.getElementById('addressForm').style.display = 'block';
        } else {
            Swal.fire({
                title: 'Error!',
                text: 'Failed to load address',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}

let originalTotal = parseFloat(document.getElementById('finalTotal').textContent.replace('₹', '').replace(',', ''));

function applyCoupon() {
    const couponButton = document.getElementById('couponButton');
    const couponCodeInput = document.getElementById('couponCode');

    if (couponButton.textContent === 'Remove') {
        // Remove coupon and reset values
        couponCodeInput.value = '';
        document.getElementById('discountRow').style.display = 'none';
        document.getElementById('discountAmount').textContent = '';
        document.getElementById('finalTotal').textContent = `₹${originalTotal.toLocaleString('en-IN')}`;
        document.getElementById('couponMessage').innerHTML = '';
        couponButton.textContent = 'Apply';
        return;
    }

    const couponCode = couponCodeInput.value.trim();
    if (!couponCode) {
        document.getElementById('couponMessage').innerHTML = `<span class="text-danger">Please enter a coupon code.</span>`;
        return;
    }

    fetch('/apply-coupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ couponCode })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById('discountRow').style.display = 'list-item';
            document.getElementById('discountAmount').textContent = `₹${data.discount.toLocaleString('en-IN')}`;
            document.getElementById('finalTotal').textContent = `₹${data.finalAmount.toLocaleString('en-IN')}`;
            document.getElementById('couponMessage').innerHTML = `<span class="text-success">Coupon applied successfully!</span>`;
            couponButton.textContent = 'Remove';
        } else {
            document.getElementById('couponMessage').innerHTML = `<span class="text-danger">${data.message}</span>`;
        }
    });
}

function submitOrder(orderData) {
    // Show loading state
    Swal.fire({
        title: 'Processing Order',
        text: 'Please wait...',
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
            Swal.showLoading();
        }
    });

    fetch('/orders/place', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: 'Success!',
                text: 'Your order has been placed successfully',
                icon: 'success',
                showConfirmButton: true,
                timer: 2000
            }).then(() => {
                window.location.href = '/userProfile#orders';
            });
        } else {
            throw new Error(data.message || 'Failed to place order');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: error.message || 'Something went wrong while placing the order',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    });
}

function placeOrder() {
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const couponInput = document.getElementById('couponCode');
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

    if (!selectedAddress) {
        Swal.fire('Error', 'Please select a delivery address', 'error');
        return;
    }

    if (!paymentMethod) {
        Swal.fire('Error', 'Please select a payment method', 'error');
        return;
    }

    const orderData = {
        addressIndex: selectedAddress.value,
        paymentMethod: paymentMethod.value.toUpperCase(), // Convert to uppercase to match schema enum
        couponCode: couponInput ? couponInput.value.trim() : null
    };

    if (paymentMethod.value === 'razorpay') {
        initiateRazorpayPayment(orderData);
    } else if (paymentMethod.value === 'wallet') {
        // Handle wallet payment
        submitOrder(orderData);
    } else {
        // Handle COD
        submitOrder(orderData);
    }
}

function initiateRazorpayPayment(orderData) {
    // Show loading state
    const finalAmount = parseFloat(document.getElementById('finalTotal').textContent
        .replace('₹', '').replace(/,/g, ''));
        const discount = parseFloat(document.getElementById('discountAmount').textContent
        .replace('₹', '').replace(/,/g, ''));
    // Add finalAmount to orderData
    orderData.finalAmount = finalAmount;
    orderData.discount = discount
    Swal.fire({
        title: 'Initiating Payment',
        text: 'Please wait...',
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
            Swal.showLoading();
        }
    });

    // First create order on your backend
    fetch('/orders/place', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData)
    })
    .then(response => response.json())
    .then(data => {
        if (!data.success) {
            throw new Error(data.message || 'Failed to create order');
        }
        
        Swal.close();

        // Initialize Razorpay checkout
        const options = {
            key: data.key,
            amount: data.amount * 100, // Amount in paise
            currency: "INR",
            name: "Euphoria",
            description: "Order Payment",
            order_id: data.orderId,
            handler: function (response) {
                verifyPayment(response, data.orderId,finalAmount,discount);
            },
            prefill: {
                name: "Customer Name", // You can pass customer details from your session
                email: "customer@example.com",
                contact: "9999999999"
            },
            theme: {
                color: "#3399cc"
            }
        };

        const rzp1 = new Razorpay(options);
        rzp1.open();
        
        // Handle payment failures
        rzp1.on('payment.failed', function (response) {
            Swal.fire({
                title: 'Payment Failed',
                text: 'The payment process failed. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: error.message || 'Something went wrong while initiating payment',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    });
}

function verifyPayment(paymentResponse, orderId, finalAmount,discount) {
    // Show loading state
    Swal.fire({
        title: 'Verifying Payment',
        text: 'Please wait...',
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
            Swal.showLoading();
        }
    });

    // Verify payment with your backend
    fetch('/orders/verify-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            razorpay_payment_id: paymentResponse.razorpay_payment_id,
            razorpay_order_id: paymentResponse.razorpay_order_id,
            razorpay_signature: paymentResponse.razorpay_signature,
            finalAmount: finalAmount,
            discount:discount // Pass finalAmount here
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: 'Success!',
                text: 'Payment successful! Your order has been placed.',
                icon: 'success',
                showConfirmButton: true
            }).then(() => {
                window.location.href = '/userProfile#orders';
            });
        } else {
            throw new Error(data.message || 'Payment verification failed');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: error.message || 'Payment verification failed',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    });
}
</script>

<%- include("../../views/partials/user/footer.ejs") %>